import Head from "next/head";
import React, { useEffect, useState } from "react";
import styles from "@/styles/Home.module.css";
import Form from "@/components/Form";
import TodoItem from "@/components/TodoItem";
import H1 from "@/components/H1";
import WrapperDiv from "@/components/Wrapper";

export interface ITodo {
  id: number,
  description: string
  isCompleted: boolean
}
export default function Home() {

  const [todos, setTodos] = useState<ITodo[]>([])
  const [newTodo, setNewTodo] =useState<string >("")
  const [todosCompleted, setTodosCompleted] = useState<number>(0)
 
const handleCheck = (event: React.ChangeEvent<HTMLInputElement>, id: number) => {
    console.log(event.target.checked)
    setTodos(prevTodos => prevTodos.map(todo => {
      if(todo.id == id){
        return {...todo, isCompleted: !todo.isCompleted}
      }
      return todo
    }))
}

const handleDelete = (id: number) => {
    setTodos(todos.filter(todo => todo.id != id))
}

const handleSubmit = (event: React.MouseEvent<HTMLButtonElement,MouseEvent> ) => {
    event.preventDefault()
    if (!newTodo) return

    let newItem = {
      id: Math.floor(Math.random() * 1000),
      description: newTodo,
      isCompleted: false
    }
    setTodos([...todos, newItem])
    
    setNewTodo("")
}

useEffect(() => {
    const countCompletedTodos = () => {
    let completed = todos.reduce((count, task) => task.isCompleted ? count + 1 : count, 0);

    setTodosCompleted(completed)
    console.log(completed)
  }
  countCompletedTodos()
}, [todos, todosCompleted])
  
  return (
    <>
      <Head>
        <title>Todo App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div>
          <H1>Todo Application</H1>
          <div>
            <div>Completed task:</div>
            <div>{todosCompleted}/{todos.length}</div>
          </div>
          <WrapperDiv>
            <Form 
              newTodo={newTodo} 
              handleSubmit={handleSubmit} 
              setNewTodo={setNewTodo}
            />
            {
              todos.length === 0 ? null :              
              todos.map(todo =>{
                return (
                <TodoItem 
                  key={todo.id} 
                  todo={todo} 
                  handleCheck={handleCheck} 
                  handleDelete={handleDelete}/>
                )
              })
            }
          </WrapperDiv>
        </div>
      </main>
    </>
  );
}
